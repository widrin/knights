// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.2
// source: center.proto

package centerrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CenterService_Request_FullMethodName   = "/centerrpc.CenterService/Request"
	CenterService_RequestIn_FullMethodName = "/centerrpc.CenterService/RequestIn"
)

// CenterServiceClient is the client API for CenterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CenterServiceClient interface {
	Request(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*MessageBody, error)
	RequestIn(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*MessageBody, error)
}

type centerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCenterServiceClient(cc grpc.ClientConnInterface) CenterServiceClient {
	return &centerServiceClient{cc}
}

func (c *centerServiceClient) Request(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*MessageBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageBody)
	err := c.cc.Invoke(ctx, CenterService_Request_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centerServiceClient) RequestIn(ctx context.Context, in *MessageBody, opts ...grpc.CallOption) (*MessageBody, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageBody)
	err := c.cc.Invoke(ctx, CenterService_RequestIn_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CenterServiceServer is the server API for CenterService service.
// All implementations must embed UnimplementedCenterServiceServer
// for forward compatibility.
type CenterServiceServer interface {
	Request(context.Context, *MessageBody) (*MessageBody, error)
	RequestIn(context.Context, *MessageBody) (*MessageBody, error)
	mustEmbedUnimplementedCenterServiceServer()
}

// UnimplementedCenterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCenterServiceServer struct{}

func (UnimplementedCenterServiceServer) Request(context.Context, *MessageBody) (*MessageBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedCenterServiceServer) RequestIn(context.Context, *MessageBody) (*MessageBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestIn not implemented")
}
func (UnimplementedCenterServiceServer) mustEmbedUnimplementedCenterServiceServer() {}
func (UnimplementedCenterServiceServer) testEmbeddedByValue()                       {}

// UnsafeCenterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CenterServiceServer will
// result in compilation errors.
type UnsafeCenterServiceServer interface {
	mustEmbedUnimplementedCenterServiceServer()
}

func RegisterCenterServiceServer(s grpc.ServiceRegistrar, srv CenterServiceServer) {
	// If the following call pancis, it indicates UnimplementedCenterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CenterService_ServiceDesc, srv)
}

func _CenterService_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).Request(ctx, req.(*MessageBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _CenterService_RequestIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CenterServiceServer).RequestIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CenterService_RequestIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CenterServiceServer).RequestIn(ctx, req.(*MessageBody))
	}
	return interceptor(ctx, in, info, handler)
}

// CenterService_ServiceDesc is the grpc.ServiceDesc for CenterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CenterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centerrpc.CenterService",
	HandlerType: (*CenterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _CenterService_Request_Handler,
		},
		{
			MethodName: "RequestIn",
			Handler:    _CenterService_RequestIn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "center.proto",
}
